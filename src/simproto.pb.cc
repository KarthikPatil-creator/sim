// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/simproto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "src/simproto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace simproto {

namespace {

const ::google::protobuf::Descriptor* Command_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Command_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApproveRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApproveRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ApproveResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ApproveResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_src_2fsimproto_2eproto() {
  protobuf_AddDesc_src_2fsimproto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "src/simproto.proto");
  GOOGLE_CHECK(file != NULL);
  Command_descriptor_ = file->message_type(0);
  static const int Command_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, args_),
  };
  Command_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Command_descriptor_,
      Command::default_instance_,
      Command_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Command, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Command));
  ApproveRequest_descriptor_ = file->message_type(1);
  static const int ApproveRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, host_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, user_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, command_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, justification_),
  };
  ApproveRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApproveRequest_descriptor_,
      ApproveRequest::default_instance_,
      ApproveRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApproveRequest));
  ApproveResponse_descriptor_ = file->message_type(2);
  static const int ApproveResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveResponse, approved_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveResponse, comment_),
  };
  ApproveResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ApproveResponse_descriptor_,
      ApproveResponse::default_instance_,
      ApproveResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ApproveResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ApproveResponse));
  SimConfig_descriptor_ = file->message_type(3);
  static const int SimConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimConfig, sock_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimConfig, admin_group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimConfig, approve_group_),
  };
  SimConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimConfig_descriptor_,
      SimConfig::default_instance_,
      SimConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_src_2fsimproto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Command_descriptor_, &Command::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApproveRequest_descriptor_, &ApproveRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ApproveResponse_descriptor_, &ApproveResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimConfig_descriptor_, &SimConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_src_2fsimproto_2eproto() {
  delete Command::default_instance_;
  delete Command_reflection_;
  delete ApproveRequest::default_instance_;
  delete ApproveRequest_reflection_;
  delete ApproveResponse::default_instance_;
  delete ApproveResponse_reflection_;
  delete SimConfig::default_instance_;
  delete SimConfig_reflection_;
}

void protobuf_AddDesc_src_2fsimproto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022src/simproto.proto\022\010simproto\"(\n\007Comman"
    "d\022\017\n\007command\030\001 \002(\t\022\014\n\004args\030\002 \003(\t\"g\n\016Appr"
    "oveRequest\022\014\n\004host\030\001 \001(\t\022\014\n\004user\030\002 \001(\t\022\""
    "\n\007command\030\003 \001(\0132\021.simproto.Command\022\025\n\rju"
    "stification\030\004 \001(\t\"4\n\017ApproveResponse\022\020\n\010"
    "approved\030\001 \002(\010\022\017\n\007comment\030\002 \001(\t\"I\n\tSimCo"
    "nfig\022\020\n\010sock_dir\030\001 \002(\t\022\023\n\013admin_group\030\002 "
    "\001(\t\022\025\n\rapprove_group\030\003 \001(\t", 306);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "src/simproto.proto", &protobuf_RegisterTypes);
  Command::default_instance_ = new Command();
  ApproveRequest::default_instance_ = new ApproveRequest();
  ApproveResponse::default_instance_ = new ApproveResponse();
  SimConfig::default_instance_ = new SimConfig();
  Command::default_instance_->InitAsDefaultInstance();
  ApproveRequest::default_instance_->InitAsDefaultInstance();
  ApproveResponse::default_instance_->InitAsDefaultInstance();
  SimConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_src_2fsimproto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_src_2fsimproto_2eproto {
  StaticDescriptorInitializer_src_2fsimproto_2eproto() {
    protobuf_AddDesc_src_2fsimproto_2eproto();
  }
} static_descriptor_initializer_src_2fsimproto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Command::kCommandFieldNumber;
const int Command::kArgsFieldNumber;
#endif  // !_MSC_VER

Command::Command()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simproto.Command)
}

void Command::InitAsDefaultInstance() {
}

Command::Command(const Command& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simproto.Command)
}

void Command::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  command_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:simproto.Command)
  SharedDtor();
}

void Command::SharedDtor() {
  if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete command_;
  }
  if (this != default_instance_) {
  }
}

void Command::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Command::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Command_descriptor_;
}

const Command& Command::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fsimproto_2eproto();
  return *default_instance_;
}

Command* Command::default_instance_ = NULL;

Command* Command::New() const {
  return new Command;
}

void Command::Clear() {
  if (has_command()) {
    if (command_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      command_->clear();
    }
  }
  args_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Command::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simproto.Command)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string command = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_command()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->command().data(), this->command().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "command");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        break;
      }

      // repeated string args = 2;
      case 2: {
        if (tag == 18) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_args()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->args(this->args_size() - 1).data(),
            this->args(this->args_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "args");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_args;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simproto.Command)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simproto.Command)
  return false;
#undef DO_
}

void Command::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simproto.Command)
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->command(), output);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->args(i).data(), this->args(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "args");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->args(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simproto.Command)
}

::google::protobuf::uint8* Command::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simproto.Command)
  // required string command = 1;
  if (has_command()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->command().data(), this->command().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "command");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->command(), target);
  }

  // repeated string args = 2;
  for (int i = 0; i < this->args_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->args(i).data(), this->args(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "args");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->args(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simproto.Command)
  return target;
}

int Command::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->command());
    }

  }
  // repeated string args = 2;
  total_size += 1 * this->args_size();
  for (int i = 0; i < this->args_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->args(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Command::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Command* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Command*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Command::MergeFrom(const Command& from) {
  GOOGLE_CHECK_NE(&from, this);
  args_.MergeFrom(from.args_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_command()) {
      set_command(from.command());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Command::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Command::CopyFrom(const Command& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Command::Swap(Command* other) {
  if (other != this) {
    std::swap(command_, other->command_);
    args_.Swap(&other->args_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Command::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Command_descriptor_;
  metadata.reflection = Command_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApproveRequest::kHostFieldNumber;
const int ApproveRequest::kUserFieldNumber;
const int ApproveRequest::kCommandFieldNumber;
const int ApproveRequest::kJustificationFieldNumber;
#endif  // !_MSC_VER

ApproveRequest::ApproveRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simproto.ApproveRequest)
}

void ApproveRequest::InitAsDefaultInstance() {
  command_ = const_cast< ::simproto::Command*>(&::simproto::Command::default_instance());
}

ApproveRequest::ApproveRequest(const ApproveRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simproto.ApproveRequest)
}

void ApproveRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  host_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  user_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  command_ = NULL;
  justification_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApproveRequest::~ApproveRequest() {
  // @@protoc_insertion_point(destructor:simproto.ApproveRequest)
  SharedDtor();
}

void ApproveRequest::SharedDtor() {
  if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_;
  }
  if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_;
  }
  if (justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete justification_;
  }
  if (this != default_instance_) {
    delete command_;
  }
}

void ApproveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApproveRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApproveRequest_descriptor_;
}

const ApproveRequest& ApproveRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fsimproto_2eproto();
  return *default_instance_;
}

ApproveRequest* ApproveRequest::default_instance_ = NULL;

ApproveRequest* ApproveRequest::New() const {
  return new ApproveRequest;
}

void ApproveRequest::Clear() {
  if (_has_bits_[0 / 32] & 15) {
    if (has_host()) {
      if (host_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_->clear();
      }
    }
    if (has_user()) {
      if (user_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_->clear();
      }
    }
    if (has_command()) {
      if (command_ != NULL) command_->::simproto::Command::Clear();
    }
    if (has_justification()) {
      if (justification_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        justification_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApproveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simproto.ApproveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string host = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user;
        break;
      }

      // optional string user = 2;
      case 2: {
        if (tag == 18) {
         parse_user:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_user()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->user().data(), this->user().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "user");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_command;
        break;
      }

      // optional .simproto.Command command = 3;
      case 3: {
        if (tag == 26) {
         parse_command:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_command()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_justification;
        break;
      }

      // optional string justification = 4;
      case 4: {
        if (tag == 34) {
         parse_justification:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_justification()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->justification().data(), this->justification().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "justification");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simproto.ApproveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simproto.ApproveRequest)
  return false;
#undef DO_
}

void ApproveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simproto.ApproveRequest)
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->user(), output);
  }

  // optional .simproto.Command command = 3;
  if (has_command()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->command(), output);
  }

  // optional string justification = 4;
  if (has_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->justification().data(), this->justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "justification");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->justification(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simproto.ApproveRequest)
}

::google::protobuf::uint8* ApproveRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simproto.ApproveRequest)
  // optional string host = 1;
  if (has_host()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->host(), target);
  }

  // optional string user = 2;
  if (has_user()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->user().data(), this->user().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "user");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->user(), target);
  }

  // optional .simproto.Command command = 3;
  if (has_command()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->command(), target);
  }

  // optional string justification = 4;
  if (has_justification()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->justification().data(), this->justification().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "justification");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->justification(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simproto.ApproveRequest)
  return target;
}

int ApproveRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string host = 1;
    if (has_host()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host());
    }

    // optional string user = 2;
    if (has_user()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->user());
    }

    // optional .simproto.Command command = 3;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->command());
    }

    // optional string justification = 4;
    if (has_justification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->justification());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApproveRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApproveRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApproveRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApproveRequest::MergeFrom(const ApproveRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_host()) {
      set_host(from.host());
    }
    if (from.has_user()) {
      set_user(from.user());
    }
    if (from.has_command()) {
      mutable_command()->::simproto::Command::MergeFrom(from.command());
    }
    if (from.has_justification()) {
      set_justification(from.justification());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApproveRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveRequest::CopyFrom(const ApproveRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveRequest::IsInitialized() const {

  if (has_command()) {
    if (!this->command().IsInitialized()) return false;
  }
  return true;
}

void ApproveRequest::Swap(ApproveRequest* other) {
  if (other != this) {
    std::swap(host_, other->host_);
    std::swap(user_, other->user_);
    std::swap(command_, other->command_);
    std::swap(justification_, other->justification_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApproveRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApproveRequest_descriptor_;
  metadata.reflection = ApproveRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ApproveResponse::kApprovedFieldNumber;
const int ApproveResponse::kCommentFieldNumber;
#endif  // !_MSC_VER

ApproveResponse::ApproveResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simproto.ApproveResponse)
}

void ApproveResponse::InitAsDefaultInstance() {
}

ApproveResponse::ApproveResponse(const ApproveResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simproto.ApproveResponse)
}

void ApproveResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  approved_ = false;
  comment_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ApproveResponse::~ApproveResponse() {
  // @@protoc_insertion_point(destructor:simproto.ApproveResponse)
  SharedDtor();
}

void ApproveResponse::SharedDtor() {
  if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete comment_;
  }
  if (this != default_instance_) {
  }
}

void ApproveResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ApproveResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ApproveResponse_descriptor_;
}

const ApproveResponse& ApproveResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fsimproto_2eproto();
  return *default_instance_;
}

ApproveResponse* ApproveResponse::default_instance_ = NULL;

ApproveResponse* ApproveResponse::New() const {
  return new ApproveResponse;
}

void ApproveResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    approved_ = false;
    if (has_comment()) {
      if (comment_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        comment_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ApproveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simproto.ApproveResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool approved = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &approved_)));
          set_has_approved();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_comment;
        break;
      }

      // optional string comment = 2;
      case 2: {
        if (tag == 18) {
         parse_comment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_comment()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->comment().data(), this->comment().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "comment");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simproto.ApproveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simproto.ApproveResponse)
  return false;
#undef DO_
}

void ApproveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simproto.ApproveResponse)
  // required bool approved = 1;
  if (has_approved()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->approved(), output);
  }

  // optional string comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->comment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simproto.ApproveResponse)
}

::google::protobuf::uint8* ApproveResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simproto.ApproveResponse)
  // required bool approved = 1;
  if (has_approved()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->approved(), target);
  }

  // optional string comment = 2;
  if (has_comment()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->comment().data(), this->comment().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "comment");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->comment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simproto.ApproveResponse)
  return target;
}

int ApproveResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool approved = 1;
    if (has_approved()) {
      total_size += 1 + 1;
    }

    // optional string comment = 2;
    if (has_comment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->comment());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ApproveResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ApproveResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ApproveResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ApproveResponse::MergeFrom(const ApproveResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_approved()) {
      set_approved(from.approved());
    }
    if (from.has_comment()) {
      set_comment(from.comment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ApproveResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ApproveResponse::CopyFrom(const ApproveResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ApproveResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ApproveResponse::Swap(ApproveResponse* other) {
  if (other != this) {
    std::swap(approved_, other->approved_);
    std::swap(comment_, other->comment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ApproveResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ApproveResponse_descriptor_;
  metadata.reflection = ApproveResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimConfig::kSockDirFieldNumber;
const int SimConfig::kAdminGroupFieldNumber;
const int SimConfig::kApproveGroupFieldNumber;
#endif  // !_MSC_VER

SimConfig::SimConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:simproto.SimConfig)
}

void SimConfig::InitAsDefaultInstance() {
}

SimConfig::SimConfig(const SimConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:simproto.SimConfig)
}

void SimConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sock_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  admin_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  approve_group_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimConfig::~SimConfig() {
  // @@protoc_insertion_point(destructor:simproto.SimConfig)
  SharedDtor();
}

void SimConfig::SharedDtor() {
  if (sock_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sock_dir_;
  }
  if (admin_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete admin_group_;
  }
  if (approve_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete approve_group_;
  }
  if (this != default_instance_) {
  }
}

void SimConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimConfig_descriptor_;
}

const SimConfig& SimConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_src_2fsimproto_2eproto();
  return *default_instance_;
}

SimConfig* SimConfig::default_instance_ = NULL;

SimConfig* SimConfig::New() const {
  return new SimConfig;
}

void SimConfig::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_sock_dir()) {
      if (sock_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sock_dir_->clear();
      }
    }
    if (has_admin_group()) {
      if (admin_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        admin_group_->clear();
      }
    }
    if (has_approve_group()) {
      if (approve_group_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        approve_group_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:simproto.SimConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sock_dir = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sock_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sock_dir().data(), this->sock_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sock_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_admin_group;
        break;
      }

      // optional string admin_group = 2;
      case 2: {
        if (tag == 18) {
         parse_admin_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_admin_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->admin_group().data(), this->admin_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "admin_group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_approve_group;
        break;
      }

      // optional string approve_group = 3;
      case 3: {
        if (tag == 26) {
         parse_approve_group:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_approve_group()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->approve_group().data(), this->approve_group().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "approve_group");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:simproto.SimConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:simproto.SimConfig)
  return false;
#undef DO_
}

void SimConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:simproto.SimConfig)
  // required string sock_dir = 1;
  if (has_sock_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sock_dir().data(), this->sock_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sock_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sock_dir(), output);
  }

  // optional string admin_group = 2;
  if (has_admin_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_group().data(), this->admin_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "admin_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->admin_group(), output);
  }

  // optional string approve_group = 3;
  if (has_approve_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->approve_group().data(), this->approve_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "approve_group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->approve_group(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:simproto.SimConfig)
}

::google::protobuf::uint8* SimConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:simproto.SimConfig)
  // required string sock_dir = 1;
  if (has_sock_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sock_dir().data(), this->sock_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sock_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sock_dir(), target);
  }

  // optional string admin_group = 2;
  if (has_admin_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->admin_group().data(), this->admin_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "admin_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->admin_group(), target);
  }

  // optional string approve_group = 3;
  if (has_approve_group()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->approve_group().data(), this->approve_group().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "approve_group");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->approve_group(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:simproto.SimConfig)
  return target;
}

int SimConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sock_dir = 1;
    if (has_sock_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sock_dir());
    }

    // optional string admin_group = 2;
    if (has_admin_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->admin_group());
    }

    // optional string approve_group = 3;
    if (has_approve_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->approve_group());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimConfig::MergeFrom(const SimConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sock_dir()) {
      set_sock_dir(from.sock_dir());
    }
    if (from.has_admin_group()) {
      set_admin_group(from.admin_group());
    }
    if (from.has_approve_group()) {
      set_approve_group(from.approve_group());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimConfig::CopyFrom(const SimConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimConfig::Swap(SimConfig* other) {
  if (other != this) {
    std::swap(sock_dir_, other->sock_dir_);
    std::swap(admin_group_, other->admin_group_);
    std::swap(approve_group_, other->approve_group_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimConfig_descriptor_;
  metadata.reflection = SimConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace simproto

// @@protoc_insertion_point(global_scope)
