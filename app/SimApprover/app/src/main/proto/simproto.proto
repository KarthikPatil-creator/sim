/*
 *    Copyright 2020 Google LLC
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        https://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
syntax = "proto2";
package simproto;

option java_package = "com.thomashabets.sim";
option java_outer_classname = "SimProto";

message Command {
        required string cwd = 1;
        required string command = 2;
        repeated string args = 3;
        repeated Environ environ = 4;
}

message Environ {
        required string key = 1;
        required string value = 2;
}

message ApproveRequest {
        optional string id = 1;
        optional string host = 2;
        optional string user = 3;
        optional Command command = 4;
	optional string justification = 5;
}

message ApproveResponse {
        optional string id = 1;
        required bool approved = 2;
	optional string comment = 3;
}

message CommandDefinition {
        // Applies if matching any of these commands.
        repeated string command = 1;

        // TODO: Define an argument spec.
}

message EnvironmentDefinition {
        optional string key_regex = 1;
        optional string value_regex = 2;
}

// SimConfig is never persisted in binary format on disk, so it's safe
// to renumber.
message SimConfig {
        // Where sockets are created.
        required string sock_dir = 1;
        optional bool create_sock_dir = 2 [default=true];

        // Administrator group.
        optional string admin_group = 3;

        // Group owner of the socket. AKA approvers group.
        optional string approve_group = 4;

        repeated CommandDefinition safe_command = 5;
        repeated CommandDefinition deny_command = 6;

        // List of safe environments to keep.
        repeated EnvironmentDefinition safe_environment = 7;
}
